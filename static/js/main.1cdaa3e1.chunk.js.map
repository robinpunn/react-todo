{"version":3,"sources":["features/remaining/remainingTodosSlice.js","features/input/addInputSlice.js","features/edit/editSlice.js","features/remove/removeSlice.js","features/toggle/toggleSlice.js","features/filter/filterSlice.js","app/store.js","features/input/TodoForm.js","features/edit/EditTodo.js","features/edit/EditIcon.js","features/remove/RemoveIcon.js","features/toggle/ToggleComplete.js","containers/Todo.js","containers/Scroll.js","features/filter/TodoFilter.js","components/Clear.js","components/NewTodoButton.js","containers/SideBar.js","TodoList.js","index.js"],"names":["remainingTodosSlice","createSlice","name","initialState","remainingTodos","reducers","state","todos","filter","todo","isCompleted","length","actions","addInputSlice","addTodo","action","newTodo","id","uuid","slice","text","payload","concat","Object","toConsumableArray","input","find","_addInputSlice$action","editSlice","editingTodoId","editedText","editTodo","setEditing","updateEditedText","_editSlice$actions","removeSlice","removeTodo","toggleCompleteSlice","toggleComplete","selectedFilterSlice","selectedFilter","rootReducer","combineReducers","addInput","addInputReducer","edit","editReducer","remove","removeReducer","toggleCompleteReducer","remainingTodosReducer","selectedFilterReducer","store","configureStore","reducer","TodoForm","_ref","_useState","useState","_useState2","slicedToArray","setInput","handleSubmit","event","preventDefault","trim","react_default","a","createElement","className","onSubmit","onKeyPress","key","type","placeholder","value","onChange","target","autoFocus","EditTodo","onCancel","onSave","newText","setnewText","onKeyDown","EditIcon","index_esm","onClick","prevEditing","RemoveIcon","ToggleComplete","Todo","editing","toggle_ToggleComplete","edit_EditTodo","EditIcon_EditIcon","remove_RemoveIcon","Scroll","props","style","overflowY","children","TodoFilter","setSelectedFilter","setTodos","handleFilter","e","innerText","toLowerCase","document","querySelector","focus","newTodos","Clear","clearTodos","NewTodoButton","SideBar","components_NewTodoButton","components_Clear","TodoList","savedTodos","localStorage","getItem","JSON","parse","err","console","error","removeItem","_useState3","_useState4","setRemainingTodos","_useState5","_useState6","useEffect","setItem","stringify","map","objectSpread","log","message","containers_SideBar","filter_TodoFilter","containers_Scroll","containers_Todo","input_TodoForm","ReactDOM","createRoot","getElementById","render","es","src_TodoList"],"mappings":"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","file":"static/js/main.1cdaa3e1.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst remainingTodosSlice = createSlice({\r\n  name: \"remainingTodos\",\r\n  initialState: { remainingTodos: 0 },\r\n  reducers: {\r\n    remainingTodos: (state) => {\r\n      state.remainingTodos = state.todos.filter(\r\n        (todo) => !todo.isCompleted\r\n      ).length;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { remainingTodos } = remainingTodosSlice.actions;\r\n\r\nexport default remainingTodosSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport uuid from \"react-uuid\";\r\nimport { remainingTodos } from \"../remaining/remainingTodosSlice\";\r\n\r\nconst initialState = {\r\n  todos: [],\r\n};\r\n\r\nconst addInputSlice = createSlice({\r\n  name: \"addInput\",\r\n  initialState,\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      const newTodo = {\r\n        id: uuid().slice(0, 4),\r\n        text: action.payload.text,\r\n        isCompleted: false,\r\n      };\r\n      state.todos = [newTodo, ...state.todos]; //state.todos.push(newTodo);\r\n      remainingTodos(state);\r\n    },\r\n    input: (state, action) => {\r\n      const todo = state.todos.find((todo) => todo.id !== action.payload.id);\r\n      if (todo) {\r\n        todo.text = action.payload.text;\r\n      }\r\n      remainingTodos(state);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTodo, input } = addInputSlice.actions;\r\n\r\nexport default addInputSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { remainingTodos } from \"../remaining/remainingTodosSlice\";\r\n\r\nconst initialState = {\r\n  editingTodoId: null,\r\n  editedText: \"\",\r\n};\r\n\r\nconst editSlice = createSlice({\r\n  name: \"edit\",\r\n  initialState,\r\n  reducers: {\r\n    editTodo: (state, action) => {\r\n      const todo = state.todos.find((todo) => todo.id === action.payload.id);\r\n      if (todo) {\r\n        todo.text = action.payload.text;\r\n      }\r\n      state.editingTodoId = null;\r\n      remainingTodos(state);\r\n    },\r\n    setEditing: (state, action) => {\r\n      const todo = state.todos.find((todo) => todo.id === action.payload.id);\r\n      state.editingTodoId = action.payload;\r\n      state.editedText = todo ? todo.text : \"\";\r\n    },\r\n    updateEditedText: (state, action) => {\r\n      state.editedText = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { editTodo, setEditing, updateEditedText } = editSlice.actions;\r\n\r\nexport default editSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { remainingTodos } from \"../remaining/remainingTodosSlice\";\r\n\r\nconst removeSlice = createSlice({\r\n  name: \"remove\",\r\n  initialState: null,\r\n  reducers: {\r\n    removeTodo: (state, action) => {\r\n      if (!state.todos) {\r\n        return;\r\n      }\r\n      state.todos = state.todos.filter((todo) => todo.id !== action.payload.id);\r\n      remainingTodos(state);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { removeTodo } = removeSlice.actions;\r\n\r\nexport default removeSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { remainingTodos } from \"../remaining/remainingTodosSlice\";\r\n\r\nconst initialState = {};\r\n\r\nconst toggleCompleteSlice = createSlice({\r\n  name: \"toggleComplete\",\r\n  initialState,\r\n  reducers: {\r\n    toggleComplete: (state, action) => {\r\n      const todo = state.todos.find((todo) => todo.id === action.payload.id);\r\n      if (todo) {\r\n        todo.isCompleted = !todo.isCompleted;\r\n      }\r\n      remainingTodos(state);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { toggleComplete } = toggleCompleteSlice.actions;\r\n\r\nexport default toggleCompleteSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  selectedFilter: \"all\",\r\n};\r\n\r\nconst selectedFilterSlice = createSlice({\r\n  name: \"selectedFilter\",\r\n  initialState,\r\n  reducers: {\r\n    selectedFilter: (state, action) => {\r\n      state.selectedFilter = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { selectedFilter } = selectedFilterSlice.actions;\r\n\r\nexport default selectedFilterSlice.reducer;\r\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport addInputReducer from \"../features/input/addInputSlice\";\r\nimport editReducer from \"../features/edit/editSlice\";\r\nimport removeReducer from \"../features/remove/removeSlice\";\r\nimport toggleCompleteReducer from \"../features/toggle/toggleSlice\";\r\nimport remainingTodosReducer from \"../features/remaining/remainingTodosSlice\";\r\nimport selectedFilterReducer from \"../features/filter/filterSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n  addInput: addInputReducer,\r\n  edit: editReducer,\r\n  remove: removeReducer,\r\n  toggleComplete: toggleCompleteReducer,\r\n  remainingTodos: remainingTodosReducer,\r\n  selectedFilter: selectedFilterReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport default store;\r\n","import React, { useState } from \"react\";\r\n\r\n/* create a component that will handle the input of todos*/\r\nconst TodoForm = ({ addTodo }) => {\r\n  //create a state for the input\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  //create a function to handle the input change\r\n  const handleChange = (event) => {\r\n    setInput(event.target.value);\r\n  };\r\n  //create a function to handle the submit only if the input is not empty\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (input.trim()) {\r\n      //if the input is not empty\r\n      addTodo(input); //add the todo needs an argument\r\n      setInput(\"\"); //reset the input to empty\r\n    }\r\n  };\r\n\r\n  //submie the form when the user hits enter\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      handleSubmit(event);\r\n    }\r\n  };\r\n\r\n  //render function\r\n  return (\r\n    <form\r\n      className=\"input-form\"\r\n      onSubmit={handleSubmit}\r\n      onKeyPress={handleKeyDown}\r\n    >\r\n      <input\r\n        className=\"todo-input\"\r\n        type=\"text\"\r\n        placeholder=\"Add a todo...\"\r\n        value={input}\r\n        onChange={handleChange}\r\n        autoFocus={true}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from \"react\";\r\n\r\nconst EditTodo = ({ text, onCancel, onSave }) => {\r\n  //create a state for the edited todo\r\n  const [newText, setnewText] = useState(text);\r\n\r\n  //create a function to handle the edit\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      onSave(newText);\r\n      onCancel();\r\n    }\r\n    if (event.key === \"Escape\") {\r\n      onCancel();\r\n    }\r\n  };\r\n\r\n  //render function\r\n  return (\r\n    <input\r\n      className=\"edit-input\"\r\n      type=\"text\"\r\n      value={newText}\r\n      onChange={(event) => setnewText(event.target.value)}\r\n      onKeyDown={handleKeyDown}\r\n      autoFocus\r\n    />\r\n  );\r\n};\r\n\r\nexport default EditTodo;\r\n","import React from \"react\";\r\nimport { FaEdit } from \"react-icons/fa\";\r\n\r\nexport const EditIcon = ({ todo, setEditing }) => {\r\n  return (\r\n    <FaEdit\r\n      className={todo.isCompleted ? \"hidden\" : \"editTodo\"}\r\n      onClick={() => setEditing((prevEditing) => !prevEditing)}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { FaTrash } from \"react-icons/fa\";\r\n\r\nconst RemoveIcon = ({ todo, removeTodo }) => {\r\n  return (\r\n    <FaTrash\r\n      className={todo.isCompleted ? \"removeTodo highlight\" : \"removeTodo\"}\r\n      onClick={() => removeTodo(todo.id)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RemoveIcon;\r\n","import React from \"react\";\r\nimport { FaCircle } from \"react-icons/fa\";\r\n\r\nconst ToggleComplete = ({ todo, toggleComplete }) => {\r\n  return (\r\n    <div className=\"circle-container\">\r\n      <FaCircle\r\n        className={todo.isCompleted ? \"fa-circle\" : \"fa-circle-o\"}\r\n        onClick={() => toggleComplete(todo.id)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToggleComplete;\r\n","import React, { useState } from \"react\";\r\nimport EditTodo from \"../features/edit/EditTodo.js\";\r\nimport { EditIcon } from \"../features/edit/EditIcon.js\";\r\nimport RemoveIcon from \"../features/remove/RemoveIcon.js\";\r\nimport ToggleComplete from \"../features/toggle/ToggleComplete.js\";\r\n\r\nconst Todo = ({ todo, removeTodo, toggleComplete }) => {\r\n  //create a state for the edit\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  //create a function to handle the edit\r\n  const handleEditSave = (newText) => {\r\n    setEditing(true);\r\n    todo.text = newText;\r\n    //if button is clicked again, set editing to false\r\n    setEditing(false);\r\n  };\r\n\r\n  //handle edit cancel\r\n  const handleEditCancel = () => {\r\n    setEditing(false);\r\n  };\r\n\r\n  //render function\r\n  return (\r\n    <div className={todo.isCompleted ? \"completed todoCard\" : \"todoCard\"}>\r\n      <div className=\"keys\">\r\n        <ToggleComplete toggleComplete={toggleComplete} todo={todo} />\r\n        {editing ? (\r\n          <EditTodo\r\n            text={todo.text}\r\n            onSave={handleEditSave}\r\n            onCancel={handleEditCancel}\r\n          />\r\n        ) : (\r\n          <p key={todo.id}>{todo.text}</p>\r\n        )}\r\n      </div>\r\n      <div className=\"editRemove\">\r\n        <EditIcon todo={todo} setEditing={setEditing} />\r\n        <RemoveIcon todo={todo} removeTodo={removeTodo} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div className=\"todoScroll\" style={{ overflowY: \"scroll\" }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nconst TodoFilter = ({ todos, setSelectedFilter, setTodos }) => {\r\n  //create a function to handle the filter\r\n  const handleFilter = (e) => {\r\n    setSelectedFilter(e.target.innerText.toLowerCase());\r\n    document.querySelector(\".todo-input\").focus();\r\n  };\r\n\r\n  //remove all completed todos\r\n  const handleClearCompleted = () => {\r\n    const newTodos = todos.filter((todo) => !todo.isCompleted);\r\n    setTodos(newTodos);\r\n    document.querySelector(\".todo-input\").focus();\r\n  };\r\n\r\n  //render function\r\n  return (\r\n    <div className=\"filter\">\r\n      <div className=\"filter-options\">\r\n        <label className=\"filter-click\" onClick={handleFilter}>\r\n          <p>All</p>\r\n        </label>\r\n        <label className=\"filter-click\" onClick={handleFilter}>\r\n          <p>Active</p>\r\n        </label>\r\n        <label className=\"filter-click\" onClick={handleFilter}>\r\n          <p>Complete</p>\r\n        </label>\r\n      </div>\r\n      <div className=\"clear-completed\">\r\n        <label className=\"filter-click clear\" onClick={handleClearCompleted}>\r\n          <p>Clear Completed</p>\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoFilter;\r\n","import React from \"react\";\r\n\r\nconst Clear = ({ clearTodos }) => {\r\n  return (\r\n    //clear todos from local storage\r\n    <button className=\"clear-btn\" onClick={() => clearTodos()}>\r\n      Clear All\r\n    </button>\r\n    //clear todos from state\r\n  );\r\n};\r\n\r\nexport default Clear;\r\n","import React from \"react\";\r\n\r\nfunction NewTodoButton() {\r\n  return <button className=\"new-btn\">New Todo +</button>;\r\n}\r\n\r\nexport default NewTodoButton;\r\n","import React from \"react\";\r\nimport Clear from \"../components/Clear.js\";\r\nimport NewTodoButton from \"../components/NewTodoButton.js\";\r\n\r\nfunction SideBar({ clearTodos }) {\r\n  return (\r\n    <div className=\"sideBar\">\r\n      <NewTodoButton />\r\n      <Clear clearTodos={clearTodos} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SideBar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport uuid from \"react-uuid\";\r\nimport TodoForm from \"./features/input/TodoForm.js\";\r\nimport Todo from \"./containers/Todo.js\";\r\nimport Scroll from \"./containers/Scroll\";\r\nimport TodoFilter from \"./features/filter/TodoFilter\";\r\nimport SideBar from \"./containers/SideBar.js\";\r\nimport Clear from \"./components/Clear.js\";\r\n\r\n//use reach hooks to create a stateful component\r\nconst TodoList = () => {\r\n  //create a state for the todos\r\n  const [todos, setTodos] = useState(() => {\r\n    // Check if there are any saved todos in local storage\r\n    const savedTodos = localStorage.getItem(\"todos\");\r\n    // If there are, return the saved todos\r\n    if (savedTodos) {\r\n      try {\r\n        return JSON.parse(savedTodos);\r\n      } catch (err) {\r\n        console.error(err);\r\n        localStorage.removeItem(\"todos\");\r\n      }\r\n    }\r\n    // If there aren't, return an empty array\r\n    return [];\r\n  });\r\n  //create a state for remaining todos\r\n  const [remainingTodos, setRemainingTodos] = useState(0);\r\n  //create a state for the filter\r\n  const [selectedFilter, setSelectedFilter] = useState(\"all\");\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  //create a function to add a todo, new todo should be on top of the list\r\n  const addTodo = (text) => {\r\n    const newTodos = [\r\n      ...todos,\r\n      { id: uuid().slice(0, 4), text, isCompleted: false },\r\n    ];\r\n    setTodos(newTodos);\r\n    console.log(todos);\r\n  };\r\n\r\n  //create a function to remove a todo\r\n  const removeTodo = (id) => {\r\n    const newTodos = [...todos].filter((todo) => todo.id !== id);\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  //create a function to toggle a todo to complete or not complete\r\n  const toggleComplete = (id) => {\r\n    const newTodos = todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        return { ...todo, isCompleted: !todo.isCompleted };\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(newTodos);\r\n    setRemainingTodos(newTodos.filter((todo) => !todo.isCompleted).length);\r\n    console.log(todos);\r\n    console.log(remainingTodos);\r\n  };\r\n\r\n  //create a function to clear all todos\r\n  const clearTodos = () => {\r\n    setTodos([]);\r\n    localStorage.removeItem(\"todos\");\r\n    // focus on the input\r\n    document.querySelector(\".todo-input\").focus();\r\n  };\r\n\r\n  //use effect to update the remaining todos\r\n  useEffect(() => {\r\n    setRemainingTodos(todos.filter((todo) => !todo.isCompleted).length);\r\n  }, [todos]);\r\n\r\n  //message to show when there is no todo\r\n  const message = (\r\n    <div className=\"message\">\r\n      {selectedFilter === \"all\" ? (\r\n        <p className=\"none\">Enter a todo...</p>\r\n      ) : selectedFilter === \"active\" ? (\r\n        <p className=\"none\">You dont have any active todos...</p>\r\n      ) : selectedFilter === \"complete\" ? (\r\n        <p className=\"none\">You haven't completed any todos...</p>\r\n      ) : null}\r\n    </div>\r\n  );\r\n\r\n  //render function\r\n  return (\r\n    <div className=\"main-container\">\r\n      <SideBar clearTodos={clearTodos} />\r\n      <div className=\"todo-container\">\r\n        <h4 className=\"header\">{remainingTodos} todos left</h4>\r\n        <TodoFilter\r\n          todos={todos}\r\n          setSelectedFilter={setSelectedFilter}\r\n          setTodos={setTodos}\r\n        />\r\n        <Scroll>\r\n          {todos.filter((todo) => {\r\n            if (selectedFilter === \"all\") {\r\n              console.log(\"selectedFilter is all\");\r\n              return true;\r\n            } else if (selectedFilter === \"active\") {\r\n              console.log(\"selectedFilter is active\");\r\n              return !todo.isCompleted;\r\n            } else {\r\n              console.log(\"selectedFilter is complete\");\r\n              return todo.isCompleted;\r\n            }\r\n          }).length\r\n            ? todos\r\n                .filter((todo) => {\r\n                  if (selectedFilter === \"all\") {\r\n                    return true;\r\n                  } else if (selectedFilter === \"active\") {\r\n                    return !todo.isCompleted;\r\n                  } else {\r\n                    return todo.isCompleted;\r\n                  }\r\n                })\r\n                .map((todo) => (\r\n                  <Todo\r\n                    key={todo.id}\r\n                    todo={todo}\r\n                    removeTodo={removeTodo}\r\n                    toggleComplete={toggleComplete}\r\n                  />\r\n                ))\r\n            : message}\r\n        </Scroll>\r\n        <TodoForm addTodo={addTodo} />\r\n        <Clear />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport TodoList from \"./TodoList\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n  <Provider store={store}>\r\n    <TodoList />\r\n  </Provider>\r\n);\r\n"],"sourceRoot":""}