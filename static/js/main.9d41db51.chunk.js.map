{"version":3,"sources":["components/TodoForm/TodoForm.js","components/EditTodo/EditTodo.js","components/Todo/Todo.js","components/Scroll/Scroll.js","components/TodoFilter/TodoFilter.js","components/Clear/Clear.js","components/TodoList/TodoList.js","index.js"],"names":["TodoForm","_ref","addTodo","_React$useState","React","useState","_React$useState2","Object","slicedToArray","input","setInput","handleSubmit","event","preventDefault","trim","react_default","a","createElement","className","onSubmit","onKeyPress","key","type","placeholder","value","onChange","target","autoFocus","EditTodo","text","onCancel","onSave","_useState","_useState2","newText","setnewText","onKeyDown","Todo","todo","removeTodo","toggleComplete","editing","setEditing","isCompleted","index_esm","onClick","id","components_EditTodo_EditTodo","Scroll","props","style","overflowY","children","TodoFilter","todos","setSelectedFilter","setTodos","handleFilter","e","innerText","toLowerCase","document","querySelector","focus","newTodos","filter","Clear","clearTodos","TodoList","savedTodos","localStorage","getItem","JSON","parse","err","console","error","removeItem","_useState3","_useState4","remainingTodos","setRemainingTodos","_useState5","_useState6","selectedFilter","useEffect","setItem","stringify","toConsumableArray","map","objectSpread","length","log","message","components_TodoForm_TodoForm","concat","uuid","slice","components_TodoFilter_TodoFilter","components_Scroll_Scroll","components_Todo_Todo","components_Clear_Clear","ReactDOM","createRoot","getElementById","render","StrictMode","components_TodoList_TodoList"],"mappings":"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","file":"static/js/main.9d41db51.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoForm.css'\r\n\r\n/* create a component that will handle the input of todos*/\r\nconst TodoForm = ({ addTodo}) => {\r\n    //create a state for the input\r\n    const [input, setInput] = React.useState('');\r\n\r\n    //create a function to handle the input change\r\n    const handleChange = (event) => {\r\n        setInput(event.target.value);\r\n    }\r\n    //create a function to handle the submit only if the input is not empty\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (input.trim()) { //if the input is not empty\r\n            addTodo(input);  //add the todo needs an argument\r\n            setInput(''); //reset the input to empty\r\n        }\r\n    }\r\n\r\n    //submie the form when the user hits enter\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            handleSubmit(event);\r\n        }\r\n    }\r\n\r\n    //render function\r\n    return (\r\n        <form className='input-form' onSubmit={handleSubmit} onKeyPress={handleKeyDown} >\r\n            <input\r\n                className='todo-input'\r\n                type=\"text\"\r\n                placeholder='Add a todo...'\r\n                value={input}\r\n                onChange={handleChange}\r\n                autoFocus={true}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm;","import React, {useState} from 'react'\r\nimport './EditTodo.css'\r\n\r\nconst EditTodo = ({ text, onCancel, onSave }) => {\r\n  //create a state for the edited todo\r\n  const [newText, setnewText] = useState(text);\r\n\r\n  //create a function to handle the edit\r\n  const handleKeyDown = (event) => {\r\n    if(event.key === 'Enter') {\r\n        onSave(newText);\r\n        onCancel();\r\n    }\r\n    if(event.key === 'Escape') {\r\n        onCancel()\r\n    }\r\n  }\r\n\r\n  //render function\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={newText}\r\n      onChange={(event) => setnewText(event.target.value)}\r\n      onKeyDown={handleKeyDown}\r\n      autoFocus\r\n    />\r\n  )\r\n}\r\n\r\nexport default EditTodo","import React, {useState} from 'react'\r\nimport { FaTrash, FaEdit, FaCircle} from 'react-icons/fa';\r\nimport './Todo.css'\r\nimport EditTodo from '../EditTodo/EditTodo';\r\n\r\n\r\nconst Todo = ({ todo, removeTodo, toggleComplete}) => {\r\n    //create a state for the edit\r\n    const [editing, setEditing] = useState(false);\r\n\r\n    //create a function to handle the edit\r\n    const handleEditSave = (newText) => {\r\n        setEditing(true);\r\n        todo.text = newText\r\n    }\r\n\r\n    //handle edit cancel\r\n    const handleEditCancel = () => {\r\n        setEditing(false);\r\n    }\r\n\r\n    //render function\r\n    return (\r\n      <div className={todo.isCompleted ? 'completed todoCard':'todoCard' }>\r\n        <div className='keys'>\r\n          <FaCircle\r\n            className={todo.isCompleted ? 'fa-circle' : 'fa-circle-o'}\r\n            onClick={() => toggleComplete(todo.id)}\r\n          />\r\n          {editing ? (\r\n            <EditTodo text={todo.text} onSave={handleEditSave} onCancel={handleEditCancel} />\r\n          ) : (\r\n            <p  key={todo.id}>{todo.text}</p>\r\n          )}\r\n        </div>\r\n        <div className='editRemove'>\r\n          <FaEdit className={todo.isCompleted ? 'hidden' : 'editTodo'} onClick={() => setEditing(true)} />\r\n          <FaTrash className={todo.isCompleted ? 'removeTodo highlight' : 'removeTodo'} onClick={() => removeTodo(todo.id)} />\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Todo;","import React from \"react\";\r\nimport './Scroll.css'\r\n\r\nconst Scroll = props => {\r\n    return (\r\n        <div className=\"todoScroll\" style={{overflowY: 'scroll'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\nimport './TodoFilter.css'\r\n\r\nconst TodoFilter = ({ todos, setSelectedFilter, setTodos }) => {\r\n    //create a function to handle the filter\r\n    const handleFilter = (e) => {\r\n        setSelectedFilter(e.target.innerText.toLowerCase());\r\n        document.querySelector('.todo-input').focus();\r\n      }\r\n\r\n    //remove all completed todos\r\n    const handleClearCompleted = () => {\r\n        const newTodos = todos.filter(todo => !todo.isCompleted);\r\n        setTodos(newTodos);\r\n        document.querySelector('.todo-input').focus();\r\n    }\r\n\r\n    //render function\r\n    return (\r\n        <div className='filter'>\r\n            <div className=\"filter-options\">\r\n                <label className=\"filter-click\" onClick={handleFilter}>\r\n                    <p>All</p>\r\n                </label>\r\n                <label className=\"filter-click\" onClick={handleFilter}>\r\n                    <p>Active</p>\r\n                </label>\r\n                <label className=\"filter-click\" onClick={handleFilter}>\r\n                    <p>Complete</p>\r\n                </label>\r\n            </div>\r\n            <div className=\"clear-completed\">\r\n                <label className=\"filter-click clear\" onClick={handleClearCompleted}>\r\n                    <p>Clear Completed</p>\r\n                </label>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoFilter;","import React from 'react'\r\nimport './Clear.css'\r\n\r\nconst Clear = ({clearTodos}) => {\r\n\r\n\r\n  return (\r\n    //clear todos from local storage\r\n    <button className='clear-btn' onClick={() => clearTodos()}>Clear All</button>\r\n    //clear todos from state\r\n  )\r\n}\r\n\r\nexport default Clear","import React, {useState, useEffect} from 'react'\r\nimport uuid from 'react-uuid';\r\nimport TodoForm from '../TodoForm/TodoForm.js';\r\nimport Todo from '../Todo/Todo.js';\r\nimport Scroll from '../Scroll/Scroll';\r\nimport './TodoList.css'\r\nimport TodoFilter from '../TodoFilter/TodoFilter';\r\nimport Clear from '../Clear/Clear.js';\r\n\r\n//use reach hooks to create a stateful component\r\nconst TodoList = () => {\r\n    //create a state for the todos\r\n    const [todos, setTodos] = useState(() => {\r\n      // Check if there are any saved todos in local storage\r\n      const savedTodos = localStorage.getItem('todos');\r\n      // If there are, return the saved todos\r\n      if (savedTodos) {\r\n        try {\r\n          return JSON.parse(savedTodos);\r\n        } catch (err) {\r\n          console.error(err);\r\n          localStorage.removeItem(\"todos\");\r\n        }\r\n      }\r\n      // If there aren't, return an empty array\r\n      return [];\r\n    });\r\n    //create a state for remaining todos\r\n    const [remainingTodos, setRemainingTodos] = useState(0);\r\n    //create a state for the filter\r\n    const [selectedFilter, setSelectedFilter] = useState('all');\r\n\r\n    useEffect(() => {\r\n      localStorage.setItem('todos', JSON.stringify(todos));\r\n    }, [todos]);\r\n\r\n    //create a function to add a todo, new todo should be on top of the list\r\n    const addTodo = (text) => {\r\n        const newTodos = [...todos, { id: uuid().slice(0,4), text, isCompleted: false }];\r\n        setTodos(newTodos);\r\n        console.log(todos)\r\n    }\r\n\r\n    //create a function to remove a todo\r\n    const removeTodo = (id) => {\r\n        const newTodos = [...todos].filter(todo => todo.id !== id);\r\n        setTodos(newTodos);\r\n    }\r\n\r\n    //create a function to toggle a todo to complete or not complete\r\n    const toggleComplete = (id) => {\r\n      const newTodos = todos.map(todo => {\r\n        if (todo.id === id) {\r\n          return { ...todo, isCompleted: !todo.isCompleted };\r\n        }\r\n        return todo;\r\n      });\r\n      setTodos(newTodos);\r\n      setRemainingTodos(newTodos.filter(todo => !todo.isCompleted).length);\r\n      console.log(todos)\r\n      console.log(remainingTodos)\r\n    }\r\n\r\n    //create a function to clear all todos\r\n    const clearTodos = () => {\r\n      setTodos([]);\r\n      localStorage.removeItem('todos')\r\n      // focus on the input\r\n      document.querySelector('.todo-input').focus();\r\n    }\r\n\r\n    //use effect to update the remaining todos\r\n    useEffect(() => {\r\n      setRemainingTodos(todos.filter(todo => !todo.isCompleted).length);\r\n    }, [todos]);\r\n\r\n    //message to show when there is no todo\r\n    const message = (\r\n      <div className='message'>\r\n        {selectedFilter === \"all\" ? (\r\n          <p className='none'>Enter a todo...</p>\r\n        ) :\r\n          selectedFilter === \"active\" ? (\r\n            <p className='none'>You dont have any active todos...</p>\r\n        ) :\r\n          selectedFilter === \"complete\" ? (\r\n            <p className='none'>You haven't completed any todos...</p>\r\n        ) : null}\r\n      </div>\r\n    )\r\n\r\n    //render function\r\n    return (\r\n        <div className='container'>\r\n            <h4 className='header'>{remainingTodos} todos left</h4>\r\n            <TodoForm addTodo={addTodo} />\r\n            <TodoFilter\r\n              todos={todos}\r\n              setSelectedFilter={setSelectedFilter}\r\n              setTodos={setTodos}\r\n            />\r\n            <Scroll>\r\n              {todos.filter(todo => {\r\n                  if (selectedFilter === \"all\") {\r\n                    console.log(\"selectedFilter is all\");\r\n                    return true;\r\n                  } else if (selectedFilter === \"active\") {\r\n                    console.log(\"selectedFilter is active\");\r\n                    return !todo.isCompleted;\r\n                  } else {\r\n                    console.log(\"selectedFilter is complete\");\r\n                    return todo.isCompleted;\r\n                  }\r\n                  }).length ?\r\n                    todos.filter(todo => {\r\n                      if (selectedFilter === \"all\") {\r\n                        return true;\r\n                      } else if (selectedFilter === \"active\") {\r\n                        return !todo.isCompleted;\r\n                      } else {\r\n                        return todo.isCompleted;\r\n                      }\r\n                  }).map(todo => (\r\n                    <Todo\r\n                      key={todo.id}\r\n                      todo={todo}\r\n                      removeTodo={removeTodo}\r\n                      toggleComplete={toggleComplete}\r\n                    />\r\n                  )) :\r\n                    message\r\n              }\r\n            </Scroll>\r\n            <Clear clearTodos={clearTodos}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport TodoList from './components/TodoList/TodoList';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <TodoList />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}